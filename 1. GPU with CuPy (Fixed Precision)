import time
import cupy as cp

def chudnovsky_gpu(iterations):
    """Compute π using the Chudnovsky algorithm on the GPU with CuPy."""
    # Constants for the Chudnovsky algorithm
    C = 426880 * cp.sqrt(10005.0)  # Constant term
    sum_series = cp.zeros(1, dtype=cp.float64)  # Sum of the series

    # Initialize variables
    M = cp.zeros(iterations, dtype=cp.float64)
    L = cp.zeros(iterations, dtype=cp.float64)
    X = cp.zeros(iterations, dtype=cp.float64)
    K = cp.zeros(iterations, dtype=cp.float64)

    M[0] = 1.0
    L[0] = 13591409.0
    X[0] = 1.0
    K[0] = 6.0

    for k in range(iterations - 1):
        # Calculate the term in the series
        term = ((-1) ** k) * M[k] * (L[k] / X[k])
        sum_series += term

        # Update variables for the next term
        M[k + 1] = (K[k] ** 3 - 16 * K[k]) * M[k] / ((k + 1) ** 3)
        L[k + 1] = L[k] + 545140134
        X[k + 1] = X[k] * -262537412640768000
        K[k + 1] = K[k] + 12

    # Compute pi from the sum of the series
    pi_approx = C / sum_series
    return pi_approx

def calculate_pi():
    """Efficient GPU-based π calculation with single-line output."""
    iterations = 100  # Start with 100 iterations
    iteration = 1

    try:
        while True:
            start_time = time.time()
            
            # Compute π with the current iteration count on the GPU
            pi_approx = chudnovsky_gpu(iterations)
            
            elapsed_time = time.time() - start_time
            
            # Update the output in a single line
            precision = iterations * 50  # Approximate precision based on iterations
            print(f"Iteration: {iteration:,}, Precision: {precision:,} digits, Time: {elapsed_time:.4f} sec", end="\r")
            
            # Gradually increase the number of iterations (and thus precision)
            iterations += 100
            iteration += 1
            
    except KeyboardInterrupt:
        # Handle interruption (Ctrl+C) and print the final π value
        print(f"\nProcess interrupted. Final calculated π value:")
        print(f"{pi_approx.item()}")  # Extract the value from CuPy array and print

# Run the optimized calculation
calculate_pi()
